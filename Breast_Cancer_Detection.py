# -*- coding: utf-8 -*-
"""Breast Cancer Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FYyqYAuRz771ez57-iwMAsapr5uoueef

Breast cancer Detection
"""

import numpy as np
import sklearn.datasets

#getting datasets
breast_cancer=sklearn.datasets.load_breast_cancer()
print(breast_cancer)

#separator
x=breast_cancer.data
y=breast_cancer.target
print(x)
print(y)

#size of dataset
print(x.shape,y.shape)

#import data to panadas DataFrame
import pandas as pd

data=pd.DataFrame(breast_cancer.data,columns=breast_cancer.feature_names)

data['class']=breast_cancer.target

data.head()

data.describe()

print(data['class'].value_counts())

print(breast_cancer.target_names)

data.groupby('class').mean()

#train and test data
from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y)
print(y.shape,y_train.shape,y_test.shape)

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1)

print(y.shape,y_train.shape,y_test.shape)

print(y.mean(),y_train.mean(),y_test.mean())

#stratify:for correct distribution of data as of the original data
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,stratify=y)
print(y.mean(),y_test.mean,y_train.mean())

#random_state:specific split of data. each value of random_state splits the data differently
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,stratify=y,random_state=1)
print(x.mean(),x_test.mean,x_train.mean())

print(x_train)

"""Linear Regression

"""

from sklearn.linear_model import LogisticRegression

classifier=LogisticRegression()

#training the model on training data
classifier.fit(x_train,y_train)

#evaluation of model
#acurracy score
from sklearn.metrics import accuracy_score

prediction_on_training_data=classifier.predict(x_train)

accuracy=accuracy_score(y_train,prediction_on_training_data)
print('accuracy on training data',accuracy)

#prediction on test data
prediction_on_test_data=classifier.predict(x_test)

accuracy1=accuracy_score(y_test,prediction_on_test_data)
print('accuracy on test data',accuracy1)

"""Detecting whether the patient has breast cancer in 'malignant' or 'benign' stage"""

input_data=(17.99,10.38,122.8,1001,0.1184,0.2776,0.3001,0.1471,0.2419,0.07871,1.095,0.9053,8.589,153.4,0.006399,
            0.04904,0.05373,0.01587,0.03003,0.006193,25.38,17.33,184.6,2019,0.1622,0.6656,0.7119,0.2654,0.4601,0.1189)
#change inpute_data to numpy array to take prediction
input_data_as_numpy_array=np.asarray(input_data)
print(input_data)

#reshape the array as we are predicting the output for one instance
input_data_reshape=input_data_as_numpy_array.reshape(1,-1)

#prediction
prediction=classifier.predict(input_data_reshape)
print(prediction)

if(prediction[0]==0):
     print('the breast cancer is malingon')
else:
    print('breast cancer is benign')


#Detecting whether the patient has breast cancer in 'malignant' or 'benign' stage
input_data=(8.196,16.84,51.71,201.9,0.086,0.05943,0.01588,0.005917,0.1769,0.06503,0.1563,0.9567,1.094,8.205,0.008968,
            0.01646,0.01588,0.005917,0.02574,0.002582,8.964,21.96,57.26,242.2,0.1297,0.1357,0.0688,0.02564,0.3105,0.07409)
#change inpute_data to numpy array to take prediction
input_data_as_numpy_array=np.asarray(input_data)
print(input_data)

#reshape the array as we are predicting the output for one instance
input_data_reshape=input_data_as_numpy_array.reshape(1,-1)

#prediction
prediction=classifier.predict(input_data_reshape)
print(prediction)

if(prediction[0]==0):
     print('the breast cancer is malingon')
else:
    print('breast cancer is benign')

"""k-nearest neighbors"""

#importing libaries of kwn
from sklearn.neighbors import KNeighborsClassifier 

#for platting
import matplotlib.pyplot as plt

#storing the k nearest neighbors classifier
kM_classifier=KNeighborsClassifier(n_neighbors=2)

#fitting the values for x and y
kM_classifier.fit(x_train,y_train)

#predicting the train values  with model
prediction_on_trainingData=kM_classifier.predict(x_train)

from sklearn.metrics import confusion_matrix
#metrics
confusion_matrix=confusion_matrix(y_train,prediction_on_trainingData)
print('original values\n',confusion_matrix)


#accuracy on training data
from sklearn.metrics import accuracy_score
accuracy_score=accuracy_score(y_train,prediction_on_trainingData)
print('Accuracy for training data:',accuracy_score)



#predicting the test values  with model
prediction_on_trainingData=kM_classifier.predict(x_test)

from sklearn.metrics import confusion_matrix
#metrics
confusion_matrix=confusion_matrix(y_test,prediction_on_trainingData)
print('original values\n',confusion_matrix)


#accuracy on testing data
from sklearn.metrics import accuracy_score
accuracy_score=accuracy_score(y_test,prediction_on_trainingData)
print('accuracy for testing data:',accuracy_score)

"""Detecting whether the patient has breast cancer in 'malignant' or 'benign' stage"""

input_data=(17.99,10.38,122.8,1001,0.1184,0.2776,0.3001,0.1471,0.2419,0.07871,1.095,0.9053,8.589,153.4,0.006399,
            0.04904,0.05373,0.01587,0.03003,0.006193,25.38,17.33,184.6,2019,0.1622,0.6656,0.7119,0.2654,0.4601,0.1189)
#change inpute_data to numpy array to take prediction
input_data_as_numpy_array=np.asarray(input_data)
print(input_data)

#reshape the array as we are predicting the output for one instance
input_data_reshape=input_data_as_numpy_array.reshape(1,-1)

#prediction
prediction=kM_classifier.predict(input_data_reshape)
print(prediction)

if(prediction[0]==0):
     print('the breast cancer is malignant')
else:
    print('breast cancer is benign')



#Detecting whether the patient has breast cancer in 'malignant' or 'benign' stage
input_data=(8.196,16.84,51.71,201.9,0.086,0.05943,0.01588,0.005917,0.1769,0.06503,0.1563,0.9567,1.094,8.205,0.008968,
            0.01646,0.01588,0.005917,0.02574,0.002582,8.964,21.96,57.26,242.2,0.1297,0.1357,0.0688,0.02564,0.3105,0.07409)
#change inpute_data to numpy array to take prediction
input_data_as_numpy_array=np.asarray(input_data)
print(input_data)

#reshape the array as we are predicting the output for one instance
input_data_reshape=input_data_as_numpy_array.reshape(1,-1)

#prediction
prediction=kM_classifier.predict(input_data_reshape)
print(prediction)

if(prediction[0]==0):
     print('the breast cancer is malignant')
else:
    print('breast cancer is benign')